package gridpilot.csplugins.fork;

import java.io.FileNotFoundException;
import java.io.IOException;

import gridpilot.DBPluginMgr;
import gridpilot.Debug;
import gridpilot.JobInfo;
import gridpilot.GridPilot;
import gridpilot.ScriptGenerator;
import gridpilot.Util;

/**
 * Script generator for the local shell plugin.
 *
 */
public class ForkScriptGenerator extends ScriptGenerator{
  private String workingDir = null;
  
  /**
   * Constructor
   */
  public ForkScriptGenerator(String csName, String _workingDir){
    super(csName);
    workingDir = _workingDir;
  }

  public boolean createWrapper(JobInfo job, String fileName){
    
    int jobDefID = job.getJobDefId();
    DBPluginMgr dbPluginMgr = GridPilot.getClassMgr().getDBPluginMgr(job.getDBName());
    String line; //used as temp working string
    StringBuffer buf = new StringBuffer();

    // Header
    if(!System.getProperty("os.name").toLowerCase().startsWith("windows")){
      writeLine(buf, "#!/bin/sh");
    }
    writeBloc(buf, "script generated by LocalShellSCriptGenerator",
        ScriptGenerator.TYPE_SECTION);

    // Runtime dependencies section
    writeBloc(buf, "runtime dependencies", ScriptGenerator.TYPE_SUBSECTION);
    // For each runtime environment used, get its init text and write it out
    String[] rtes =
        dbPluginMgr.getRuntimeEnvironments(jobDefID);
    for(int i=0; i<rtes.length; ++i){
      writeBloc(buf, "runtime environment: " + rtes[i], ScriptGenerator.TYPE_COMMENT);
      String initTxt = dbPluginMgr.getRuntimeEnvironment(
          dbPluginMgr.getRuntimeEnvironmentID(rtes[i], csName)
          ).getValue("initLines").toString();
      writeLine(buf, initTxt.replace('\r', ' ')); // get rid of Windows' <ctrl>M
      writeLine(buf, "");
    }

    // transformation script call section
    String [] formalParam =
        dbPluginMgr.getTransformationArguments(jobDefID);
    String [] actualParam =
        dbPluginMgr.getJobDefTransPars(jobDefID);
    // write out the signature
    line = "Transformation script arguments: ";
    for(int i=0; i<formalParam.length; ++i){
      line += " " + formalParam[i];
    }
    writeBloc(buf, line, ScriptGenerator.TYPE_SUBSECTION);
    for(int i=0; i<formalParam.length; ++i){
      actualParam[i] = Util.encode(actualParam[i]);
    }
    writeLine(buf, "");
    writeBloc(buf, "transformation script call", ScriptGenerator.TYPE_SUBSECTION);
    line = dbPluginMgr.getTransformationScript(jobDefID) + " " +
      Util.arrayToString(actualParam);
    line = Util.clearFile(line);
    if(!System.getProperty("os.name").toLowerCase().startsWith("windows")){
      line = line.replaceAll("/", "\\");
    }
    writeLine(buf, line);
    writeLine(buf, "");

    try{
      GridPilot.getClassMgr().getCSPluginMgr().getShellMgr(
          csName).writeFile(workingDir+"/"+fileName, buf.toString(), false);
      // This will not work under Windows; we silently ignore...
      try{
        StringBuffer stdout = new StringBuffer();
        StringBuffer stderr = new StringBuffer();
        GridPilot.getClassMgr().getCSPluginMgr().getShellMgr(
            csName).exec("chmod +x "+workingDir+"/"+fileName, stdout, stderr);
        if(stderr!=null && stderr.length()!=0){
          Debug.debug("Could not set job executable. "+stderr, 1);
          throw new FileNotFoundException(stderr.toString());
        }
      }
      catch(Exception e){
        Debug.debug("Warning: NOT setting file executable. " +
            "Probably not on UNIX. "+e.getMessage(), 2);
      }
    }
    catch(FileNotFoundException fnfe){
      logFile.addMessage("Could not create job wrapper. ", fnfe);
      return false;
    }
    catch(IOException ioe){
      ioe.printStackTrace();
      return false;
    }
    catch(Exception ioe){
      ioe.printStackTrace();
      return false;
    }
    return true;
  }
}