package gridpilot.csplugins.glite;

import gridpilot.DBPluginMgr;
import gridpilot.Debug;
import gridpilot.GridPilot;
import gridpilot.JobInfo;
import gridpilot.ScriptGenerator;
import gridpilot.Util;

import java.io.*;
import java.util.List;

public class GLiteScriptGenerator extends ScriptGenerator {

  String cpuTime = null;
  String reRun = null;
  List localInputFilesList = null;
  List remoteInputFilesList = null;

  public GLiteScriptGenerator(String _csName) {
    super(_csName);
    csName = _csName;
    cpuTime = configFile.getValue(csName, "CPU time");
    reRun = configFile.getValue(csName, "Max rerun");
  }

  public boolean createJDL(JobInfo job, String exeFileName, String jdlFileName){

    String line;
    String jobDefID = job.getJobDefId();
    DBPluginMgr dbPluginMgr = GridPilot.getClassMgr().getDBPluginMgr(job.getDBName());
    String [] formalParam = dbPluginMgr.getTransformationArguments(jobDefID);
    String [] actualParam = dbPluginMgr.getJobDefTransPars(jobDefID);

    // The transformation script
    String scriptFileName = dbPluginMgr.getTransformationScript(jobDefID);
    String shortScriptName = scriptFileName;
    int lastSlash = shortScriptName.replaceAll("\\\\", "/").lastIndexOf("/");
    if(lastSlash>-1){
      shortScriptName = shortScriptName.substring(lastSlash + 1);
    }
    // names starting with file: will be uploaded, names starting with
    // / or c:\ are considered to be locally available on the server
    if(scriptFileName.startsWith("file:")){
      localInputFilesList.add(Util.clearTildeLocally(Util.clearFile(scriptFileName)));
    }

    //create jdl file
    RandomAccessFile out=null;
    try{
      if(!new File(jdlFileName).getParentFile().exists())
        new File(jdlFileName).getParentFile().mkdir();
      out = new RandomAccessFile(jdlFileName, "rw");
      out.setLength(0);

      writeLine(out, "Executable = \"/usr/bin/sh\";");
      writeLine(out, "Arguments = \""+scriptFileName+"\";");
      writeLine(out, "StdOutput = \"stdout\";");
      writeLine(out, "StdError = \"stderr\";");
      line = "InputSandbox = {"+
             "\"" + scriptFileName + "\", "+
             "\"" + TDef + "\", "+
             "\"" + "./atlasprod.rc.conf" + "\"};" ;
      writeLine(out,line);
      writeLine(out, "OutputSandbox = {\"stdout\", \"stderr\"};");
      line = "InputData = {";
      for(int i=0; i< formalParam.length; ++i){
        if(formalParam[i].startsWith("LFN:")) {
          line += "\"LF:"+actualParam[i]+"\", " ;
        }
      }
      line += "};";
      line = line.replaceFirst(", }","  }") ;
      //TODO fix ending comma
      writeLine(out, line);
      writeLine(out, "DataAccessProtocol = \"gridftp\";");
      writeLine(out,"Requirements = Member(\"VO-atlas-production-12.0.5\", " +
            "other.GlueHostApplicationSoftwareRunTimeEnvironment);");
      try{
        out.close();
      }
      catch(IOException ioe){
        Debug.debug("cannot close "+ out.toString(), 1);
      }

      //create job script

      out=null;
      try{
        if(!new File(scriptFileName).getParentFile().exists())
          new File(scriptFileName).getParentFile().mkdir();

        out = new RandomAccessFile(scriptFileName, "rw");
        out.setLength(0);
      }
      catch(IOException ioe){System.out.println(ioe.getMessage()); return false;}

      // Header
      writeLine(out,"#!/usr/bin/sh");
      writeLine(out,"# Script generated by AtCom");
      writeBloc(out, csName + " wrapper script", 0, "#");

      // Runtime environment dependencies. Text from runtimeEnvironment.init
      writeBloc(out, "packages dependencies", 1, "#");

      String [] uses = amiMgt.getPartTransUses(partitionIdentifier);

      for(int i=0; i<uses.length; ++i){
        writeBloc(out, "use "+ uses[i], 2, "#");
        String initTxt = amiMgt.getPackInitText(uses[i], systemName) ;
        writeLine(out, initTxt.replace('\r',' '));
        writeLine(out, "");
      }

      // parameter translation

      writeBloc(out, "parameter translation", 1, "#");

      line ="PARAM";
      for(int i=0; i<formalParam.length; ++i){
        line += " "+formalParam[i];
      }
      writeBloc(out, line, 1, "#");

      for(int i=0; i< formalParam.length; ++i){
        if(formalParam[i].startsWith("LFN:")) {
          writeLine(out, "p"+(i+1)+"=`edg-replica-manager-getBestFile "+ actualParam[i] +" $CLSE`");
          writeLine(out, "if [ $? -ne 0 ] ; then echo '>>ERROR:' could not find signal file ; exit 1 ; fi");
        }
        else
          writeLine(out, "p"+(i+1)+"="+actualParam[i]);
      }

      writeLine(out, "");

      // core script call

      writeBloc(out, "core script call", 1, "#");

      line = amiMgt.getPartTransDefinition(partitionIdentifier);
      int lastSlash = line.lastIndexOf("/");
      if (lastSlash > -1) line = line.substring(lastSlash + 1);
      //!!! chop off leading path
      for(int i=0; i<formalParam.length; ++i)
        line += " $p"+(i+1);
      writeLine(out, line);
      writeLine(out, "");

      // output file copy

      writeBloc(out, "output file copy", 1, "#");

      String [] outputMapping = amiMgt.getPartTransOutputs(partitionIdentifier);
      String localName;
      String logicalName;
      String logicalDir;

      writeLine(out, "MYHOST=`hostname --long`");
      writeLine(out, "CURDIR=`pwd`");

      for(int i=0; i< outputMapping.length ; ++i){
        localName = amiMgt.getPartOutLocalName(partitionIdentifier, outputMapping[i]);
        logicalName = amiMgt.getPartOutRemoteName(partitionIdentifier, outputMapping[i]);

        String [] dblLine = {localName, " -> " + logicalName};
        writeBloc(out, dblLine, 1, "#");
        line = "edg-rm-creg "+
               " -l " + logicalName +
               " -c atlasprod.rc.conf "+
               " -s $MYHOST/$CURDIR/"+localName +
               " -d lxshare0393.cern.ch";
        writeLine(out, line);
        writeLine(out, "if [ $? -ne 0 ] ; then  echo '>>ERROR:' could not creg output file ; exit 1 ; fi");
      }

      try{
        out.close();
      }
      catch(IOException ioe){System.err.print("cannot close "+ out.toString());}

      return true;
    }
    catch(IOException ioe){System.out.println(ioe.getMessage()); return false;}
  }
}